<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!--1 引入属性文件，在配置中占位使用 -->
    <context:property-placeholder location="classpath*:db.properties" />
    <!--2 配置C3P0数据源 -->
    <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!--驱动类名 -->
        <property name="driverClass" value="${driver}" />
        <property name="jdbcUrl" value="${url}" />
        <property name="user" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
        <property name="acquireIncrement" value="1"></property>
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="1"></property>
        <!-- 连接池中连接最小个数 -->
        <property name="minPoolSize" value="1"></property>
        <!-- 连接池中连接最大个数 -->
        <property name="maxPoolSize" value="1"></property>
    </bean>
    <!--3 会话工厂bean sqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="datasource"></property>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.universal.data.domain"></property>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:com/universal/data/mapper/*.xml"></property>
    </bean>
    <!--4 自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="com.universal.data.mapper"></property>
    </bean>
    <!--5 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"></property>
    </bean>
    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--6 容器自动扫描IOC组件  -->
    <context:component-scan base-package="com.universal"></context:component-scan>
    <!--7 aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>


    <!--&lt;!&ndash;Services Config&ndash;&gt;-->
    <!--<bean name="UserServiceImpl" class="UserServiceImpl" scope="singleton"></bean>-->

    <!--Aop Config-->
    <bean id="beforeLog" class="com.universal.common.advise.BeforeLog"/>
    <bean id="afterLog" class="com.universal.common.advise.AfterLog"></bean>
    <aop:config>
        <aop:pointcut expression="execution(* com.universal.service.implementation.*.*(..))" id="servicepointcut"/>
        <aop:advisor advice-ref="beforeLog" pointcut-ref="servicepointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="servicepointcut"/>
    </aop:config>
    <aop:config>
        <aop:pointcut expression="execution(* com.universal.web.controller.*.*(..))" id="controllerpointcut"/>
        <aop:advisor advice-ref="beforeLog" pointcut-ref="controllerpointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="controllerpointcut"/>
    </aop:config>
</beans>